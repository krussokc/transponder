# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- deploy

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  projectPath: '**/src/Api'
  project: '$(projectPath)/DeviceManagement.Api.csproj'

  tests: '**/*.Tests.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages

stages:
- stage: ProjectBuild
  displayName: Build Image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: windows-latest
    steps:
    # - task: UseDotNet@2
    #   displayName: 'Use .NET Core 6 sdk'
    #   inputs:
    #     version: '6.0.x'
      - script: cd ..
      - script: dotnet --info
#     - task: NuGetToolInstaller@1
#       displayName: 'Install NuGet Tool'
#     - task: Cache@2
#       displayName: NuGet Cache
#       inputs:
#         key: 'nuget | "$(Agent.OS)" | **/packages.lock.json,!**/bin/**,!**/obj/**'
#         restoreKeys: |
#            nuget | "$(Agent.OS)"
#            nuget
#         path: '$(NUGET_PACKAGES)'
#         cacheHitVar: 'CACHE_RESTORED'
#     - task: NuGetCommand@2
#       displayName: 'NuGet Restore'
#       condition: ne(variables.CACHE_RESTORED, true)
#       inputs:
#         command: 'restore'
#         restoreSolution: '$(solution)'
#     - task: DotNetCoreCLI@2
#       displayName: 'Build Project'
#       inputs:
#         command: build
#         projects: '$(project)'
#         arguments: '-c $(buildConfiguration)'
#     - task: DotNetCoreCLI@2
#       displayName: 'Run Tests'
#       inputs:
#         command: test
#         publishTestResults: true
#         projects: '$(tests)'
#     - task: DotNetCoreCLI@2
#       displayName: Publish Project
#       inputs:
#         command: 'publish'
#         publishWebProjects: true
#         arguments: '-o $(Build.ArtifactStagingDirectory)'
#         zipAfterPublish: false
#     - task: PublishBuildArtifacts@1
#       displayName: Publish Artifacts
#       inputs:
#         PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#         ArtifactName: '$(buildConfiguration)'
#         publishLocation: 'Container'
# - stage: DockerBuild
#   displayName: Build Docker Image
#   jobs:
#   - job: Build
#     displayName: Build
#     pool:
#       vmImage: ubuntu-latest
#     steps:
#     - task: Docker@2
#       inputs:
#         containerRegistry: 'meshtmscontainerregistry'
#         repository: 'devicemanagement'
#         command: 'buildAndPush'
#         Dockerfile: '**/Dockerfile'